/*! Wowchemy v5.3.0 | https://wowchemy.com/ */
/*! Copyright 2016-present George Cushen (https://georgecushen.com/) */
/*! License: https://github.com/wowchemy/wowchemy-hugo-modules/blob/main/LICENSE.md */

;
(() => {
  // <stdin>
  (() => {
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var isSupported = function isSupported2(node) {
      return node.tagName === "IMG";
    };
    var isNodeList = function isNodeList2(selector) {
      return NodeList.prototype.isPrototypeOf(selector);
    };
    var isNode = function isNode2(selector) {
      return selector && selector.nodeType === 1;
    };
    var isSvg = function isSvg2(image) {
      var source = image.currentSrc || image.src;
      return source.substr(-4).toLowerCase() === ".svg";
    };
    var getImagesFromSelector = function getImagesFromSelector2(selector) {
      try {
        if (Array.isArray(selector)) {
          return selector.filter(isSupported);
        }
        if (isNodeList(selector)) {
          return [].slice.call(selector).filter(isSupported);
        }
        if (isNode(selector)) {
          return [selector].filter(isSupported);
        }
        if (typeof selector === "string") {
          return [].slice.call(document.querySelectorAll(selector)).filter(isSupported);
        }
        return [];
      } catch (err) {
        throw new TypeError("The provided selector is invalid.\nExpects a CSS selector, a Node element, a NodeList or an array.\nSee: https://github.com/francoischalifour/medium-zoom");
      }
    };
    var createOverlay = function createOverlay2(background) {
      var overlay = document.createElement("div");
      overlay.classList.add("medium-zoom-overlay");
      overlay.style.background = background;
      return overlay;
    };
    var cloneTarget = function cloneTarget2(template) {
      var _template$getBounding = template.getBoundingClientRect(), top = _template$getBounding.top, left = _template$getBounding.left, width = _template$getBounding.width, height = _template$getBounding.height;
      var clone = template.cloneNode();
      var scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
      var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0;
      clone.removeAttribute("id");
      clone.style.position = "absolute";
      clone.style.top = top + scrollTop + "px";
      clone.style.left = left + scrollLeft + "px";
      clone.style.width = width + "px";
      clone.style.height = height + "px";
      clone.style.transform = "";
      return clone;
    };
    var createCustomEvent = function createCustomEvent2(type, params) {
      var eventParams = _extends({
        bubbles: false,
        cancelable: false,
        detail: void 0
      }, params);
      if (typeof window.CustomEvent === "function") {
        return new CustomEvent(type, eventParams);
      }
      var customEvent = document.createEvent("CustomEvent");
      customEvent.initCustomEvent(type, eventParams.bubbles, eventParams.cancelable, eventParams.detail);
      return customEvent;
    };
    var mediumZoomEsm = function mediumZoom(selector) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var Promise2 = window.Promise || function Promise3(fn) {
        function noop() {
        }
        fn(noop, noop);
      };
      var _handleClick = function _handleClick2(event) {
        var target = event.target;
        if (target === overlay) {
          close();
          return;
        }
        if (images.indexOf(target) === -1) {
          return;
        }
        toggle({target});
      };
      var _handleScroll = function _handleScroll2() {
        if (isAnimating || !active.original) {
          return;
        }
        var currentScroll = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
        if (Math.abs(scrollTop - currentScroll) > zoomOptions.scrollOffset) {
          setTimeout(close, 150);
        }
      };
      var _handleKeyUp = function _handleKeyUp2(event) {
        var key = event.key || event.keyCode;
        if (key === "Escape" || key === "Esc" || key === 27) {
          close();
        }
      };
      var update = function update2() {
        var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var newOptions = options2;
        if (options2.background) {
          overlay.style.background = options2.background;
        }
        if (options2.container && options2.container instanceof Object) {
          newOptions.container = _extends({}, zoomOptions.container, options2.container);
        }
        if (options2.template) {
          var template = isNode(options2.template) ? options2.template : document.querySelector(options2.template);
          newOptions.template = template;
        }
        zoomOptions = _extends({}, zoomOptions, newOptions);
        images.forEach(function(image) {
          image.dispatchEvent(createCustomEvent("medium-zoom:update", {
            detail: {zoom}
          }));
        });
        return zoom;
      };
      var clone = function clone2() {
        var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        return mediumZoomEsm(_extends({}, zoomOptions, options2));
      };
      var attach = function attach2() {
        for (var _len = arguments.length, selectors = Array(_len), _key = 0; _key < _len; _key++) {
          selectors[_key] = arguments[_key];
        }
        var newImages = selectors.reduce(function(imagesAccumulator, currentSelector) {
          return [].concat(imagesAccumulator, getImagesFromSelector(currentSelector));
        }, []);
        newImages.filter(function(newImage) {
          return images.indexOf(newImage) === -1;
        }).forEach(function(newImage) {
          images.push(newImage);
          newImage.classList.add("medium-zoom-image");
        });
        eventListeners.forEach(function(_ref) {
          var type = _ref.type, listener = _ref.listener, options2 = _ref.options;
          newImages.forEach(function(image) {
            image.addEventListener(type, listener, options2);
          });
        });
        return zoom;
      };
      var detach = function detach2() {
        for (var _len2 = arguments.length, selectors = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          selectors[_key2] = arguments[_key2];
        }
        if (active.zoomed) {
          close();
        }
        var imagesToDetach = selectors.length > 0 ? selectors.reduce(function(imagesAccumulator, currentSelector) {
          return [].concat(imagesAccumulator, getImagesFromSelector(currentSelector));
        }, []) : images;
        imagesToDetach.forEach(function(image) {
          image.classList.remove("medium-zoom-image");
          image.dispatchEvent(createCustomEvent("medium-zoom:detach", {
            detail: {zoom}
          }));
        });
        images = images.filter(function(image) {
          return imagesToDetach.indexOf(image) === -1;
        });
        return zoom;
      };
      var on = function on2(type, listener) {
        var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        images.forEach(function(image) {
          image.addEventListener("medium-zoom:" + type, listener, options2);
        });
        eventListeners.push({type: "medium-zoom:" + type, listener, options: options2});
        return zoom;
      };
      var off = function off2(type, listener) {
        var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        images.forEach(function(image) {
          image.removeEventListener("medium-zoom:" + type, listener, options2);
        });
        eventListeners = eventListeners.filter(function(eventListener) {
          return !(eventListener.type === "medium-zoom:" + type && eventListener.listener.toString() === listener.toString());
        });
        return zoom;
      };
      var open = function open2() {
        var _ref2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, target = _ref2.target;
        var _animate = function _animate2() {
          var container = {
            width: document.documentElement.clientWidth,
            height: document.documentElement.clientHeight,
            left: 0,
            top: 0,
            right: 0,
            bottom: 0
          };
          var viewportWidth = void 0;
          var viewportHeight = void 0;
          if (zoomOptions.container) {
            if (zoomOptions.container instanceof Object) {
              container = _extends({}, container, zoomOptions.container);
              viewportWidth = container.width - container.left - container.right - zoomOptions.margin * 2;
              viewportHeight = container.height - container.top - container.bottom - zoomOptions.margin * 2;
            } else {
              var zoomContainer = isNode(zoomOptions.container) ? zoomOptions.container : document.querySelector(zoomOptions.container);
              var _zoomContainer$getBou = zoomContainer.getBoundingClientRect(), _width = _zoomContainer$getBou.width, _height = _zoomContainer$getBou.height, _left = _zoomContainer$getBou.left, _top = _zoomContainer$getBou.top;
              container = _extends({}, container, {
                width: _width,
                height: _height,
                left: _left,
                top: _top
              });
            }
          }
          viewportWidth = viewportWidth || container.width - zoomOptions.margin * 2;
          viewportHeight = viewportHeight || container.height - zoomOptions.margin * 2;
          var zoomTarget = active.zoomedHd || active.original;
          var naturalWidth = isSvg(zoomTarget) ? viewportWidth : zoomTarget.naturalWidth || viewportWidth;
          var naturalHeight = isSvg(zoomTarget) ? viewportHeight : zoomTarget.naturalHeight || viewportHeight;
          var _zoomTarget$getBoundi = zoomTarget.getBoundingClientRect(), top = _zoomTarget$getBoundi.top, left = _zoomTarget$getBoundi.left, width = _zoomTarget$getBoundi.width, height = _zoomTarget$getBoundi.height;
          var scaleX = Math.min(naturalWidth, viewportWidth) / width;
          var scaleY = Math.min(naturalHeight, viewportHeight) / height;
          var scale = Math.min(scaleX, scaleY);
          var translateX = (-left + (viewportWidth - width) / 2 + zoomOptions.margin + container.left) / scale;
          var translateY = (-top + (viewportHeight - height) / 2 + zoomOptions.margin + container.top) / scale;
          var transform = "scale(" + scale + ") translate3d(" + translateX + "px, " + translateY + "px, 0)";
          active.zoomed.style.transform = transform;
          if (active.zoomedHd) {
            active.zoomedHd.style.transform = transform;
          }
        };
        return new Promise2(function(resolve) {
          if (target && images.indexOf(target) === -1) {
            resolve(zoom);
            return;
          }
          var _handleOpenEnd = function _handleOpenEnd2() {
            isAnimating = false;
            active.zoomed.removeEventListener("transitionend", _handleOpenEnd2);
            active.original.dispatchEvent(createCustomEvent("medium-zoom:opened", {
              detail: {zoom}
            }));
            resolve(zoom);
          };
          if (active.zoomed) {
            resolve(zoom);
            return;
          }
          if (target) {
            active.original = target;
          } else if (images.length > 0) {
            var _images = images;
            active.original = _images[0];
          } else {
            resolve(zoom);
            return;
          }
          active.original.dispatchEvent(createCustomEvent("medium-zoom:open", {
            detail: {zoom}
          }));
          scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
          isAnimating = true;
          active.zoomed = cloneTarget(active.original);
          document.body.appendChild(overlay);
          if (zoomOptions.template) {
            var template = isNode(zoomOptions.template) ? zoomOptions.template : document.querySelector(zoomOptions.template);
            active.template = document.createElement("div");
            active.template.appendChild(template.content.cloneNode(true));
            document.body.appendChild(active.template);
          }
          document.body.appendChild(active.zoomed);
          window.requestAnimationFrame(function() {
            document.body.classList.add("medium-zoom--opened");
          });
          active.original.classList.add("medium-zoom-image--hidden");
          active.zoomed.classList.add("medium-zoom-image--opened");
          active.zoomed.addEventListener("click", close);
          active.zoomed.addEventListener("transitionend", _handleOpenEnd);
          if (active.original.getAttribute("data-zoom-src")) {
            active.zoomedHd = active.zoomed.cloneNode();
            active.zoomedHd.removeAttribute("srcset");
            active.zoomedHd.removeAttribute("sizes");
            active.zoomedHd.src = active.zoomed.getAttribute("data-zoom-src");
            active.zoomedHd.onerror = function() {
              clearInterval(getZoomTargetSize);
              console.warn("Unable to reach the zoom image target " + active.zoomedHd.src);
              active.zoomedHd = null;
              _animate();
            };
            var getZoomTargetSize = setInterval(function() {
              if (active.zoomedHd.complete) {
                clearInterval(getZoomTargetSize);
                active.zoomedHd.classList.add("medium-zoom-image--opened");
                active.zoomedHd.addEventListener("click", close);
                document.body.appendChild(active.zoomedHd);
                _animate();
              }
            }, 10);
          } else if (active.original.hasAttribute("srcset")) {
            active.zoomedHd = active.zoomed.cloneNode();
            active.zoomedHd.removeAttribute("sizes");
            active.zoomedHd.removeAttribute("loading");
            var loadEventListener = active.zoomedHd.addEventListener("load", function() {
              active.zoomedHd.removeEventListener("load", loadEventListener);
              active.zoomedHd.classList.add("medium-zoom-image--opened");
              active.zoomedHd.addEventListener("click", close);
              document.body.appendChild(active.zoomedHd);
              _animate();
            });
          } else {
            _animate();
          }
        });
      };
      var close = function close2() {
        return new Promise2(function(resolve) {
          if (isAnimating || !active.original) {
            resolve(zoom);
            return;
          }
          var _handleCloseEnd = function _handleCloseEnd2() {
            active.original.classList.remove("medium-zoom-image--hidden");
            document.body.removeChild(active.zoomed);
            if (active.zoomedHd) {
              document.body.removeChild(active.zoomedHd);
            }
            document.body.removeChild(overlay);
            active.zoomed.classList.remove("medium-zoom-image--opened");
            if (active.template) {
              document.body.removeChild(active.template);
            }
            isAnimating = false;
            active.zoomed.removeEventListener("transitionend", _handleCloseEnd2);
            active.original.dispatchEvent(createCustomEvent("medium-zoom:closed", {
              detail: {zoom}
            }));
            active.original = null;
            active.zoomed = null;
            active.zoomedHd = null;
            active.template = null;
            resolve(zoom);
          };
          isAnimating = true;
          document.body.classList.remove("medium-zoom--opened");
          active.zoomed.style.transform = "";
          if (active.zoomedHd) {
            active.zoomedHd.style.transform = "";
          }
          if (active.template) {
            active.template.style.transition = "opacity 150ms";
            active.template.style.opacity = 0;
          }
          active.original.dispatchEvent(createCustomEvent("medium-zoom:close", {
            detail: {zoom}
          }));
          active.zoomed.addEventListener("transitionend", _handleCloseEnd);
        });
      };
      var toggle = function toggle2() {
        var _ref3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, target = _ref3.target;
        if (active.original) {
          return close();
        }
        return open({target});
      };
      var getOptions = function getOptions2() {
        return zoomOptions;
      };
      var getImages = function getImages2() {
        return images;
      };
      var getZoomedImage = function getZoomedImage2() {
        return active.original;
      };
      var images = [];
      var eventListeners = [];
      var isAnimating = false;
      var scrollTop = 0;
      var zoomOptions = options;
      var active = {
        original: null,
        zoomed: null,
        zoomedHd: null,
        template: null
      };
      if (Object.prototype.toString.call(selector) === "[object Object]") {
        zoomOptions = selector;
      } else if (selector || typeof selector === "string") {
        attach(selector);
      }
      zoomOptions = _extends({
        margin: 0,
        background: "#fff",
        scrollOffset: 40,
        container: null,
        template: null
      }, zoomOptions);
      var overlay = createOverlay(zoomOptions.background);
      document.addEventListener("click", _handleClick);
      document.addEventListener("keyup", _handleKeyUp);
      document.addEventListener("scroll", _handleScroll);
      window.addEventListener("resize", close);
      var zoom = {
        open,
        close,
        toggle,
        update,
        clone,
        attach,
        detach,
        on,
        off,
        getOptions,
        getImages,
        getZoomedImage
      };
      return zoom;
    };
    function styleInject(css2, ref) {
      if (ref === void 0)
        ref = {};
      var insertAt = ref.insertAt;
      if (!css2 || typeof document === "undefined") {
        return;
      }
      var head = document.head || document.getElementsByTagName("head")[0];
      var style = document.createElement("style");
      style.type = "text/css";
      if (insertAt === "top") {
        if (head.firstChild) {
          head.insertBefore(style, head.firstChild);
        } else {
          head.appendChild(style);
        }
      } else {
        head.appendChild(style);
      }
      if (style.styleSheet) {
        style.styleSheet.cssText = css2;
      } else {
        style.appendChild(document.createTextNode(css2));
      }
    }
    var css = ".medium-zoom-overlay{position:fixed;top:0;right:0;bottom:0;left:0;opacity:0;transition:opacity .3s;will-change:opacity}.medium-zoom--opened .medium-zoom-overlay{cursor:pointer;cursor:zoom-out;opacity:1}.medium-zoom-image{cursor:pointer;cursor:zoom-in;transition:transform .3s cubic-bezier(.2,0,.2,1)!important}.medium-zoom-image--hidden{visibility:hidden}.medium-zoom-image--opened{position:relative;cursor:pointer;cursor:zoom-out;will-change:transform}";
    styleInject(css);
    var medium_zoom_esm_default = mediumZoomEsm;
    var codeHighlighting = true;
    var hugoEnvironment = "development";
    var searchEnabled = true;
    function fixMermaid(render = false) {
      let mermaids = [];
      [].push.apply(mermaids, document.getElementsByClassName("language-mermaid"));
      for (let i = 0; i < mermaids.length; i++) {
        let mermaidCodeElement = mermaids[i];
        let newElement = document.createElement("div");
        newElement.innerHTML = mermaidCodeElement.innerHTML;
        newElement.classList.add("mermaid");
        if (render) {
          window.mermaid.mermaidAPI.render(`mermaid-${i}`, newElement.textContent, function(svgCode) {
            newElement.innerHTML = svgCode;
          });
        }
        mermaidCodeElement.parentNode.replaceWith(newElement);
      }
      console.debug(`Processed ${mermaids.length} Mermaid code blocks`);
    }
    function scrollParentToChild(parent, child) {
      const parentRect = parent.getBoundingClientRect();
      const parentViewableArea = {
        height: parent.clientHeight,
        width: parent.clientWidth
      };
      const childRect = child.getBoundingClientRect();
      const isChildInView = childRect.top >= parentRect.top && childRect.bottom <= parentRect.top + parentViewableArea.height;
      if (!isChildInView) {
        parent.scrollTop = childRect.top + parent.scrollTop - parentRect.top;
      }
    }
    function fadeIn(element, duration = 600) {
      element.style.display = "";
      element.style.opacity = "0";
      let last = +new Date();
      let tick = function() {
        element.style.opacity = (+element.style.opacity + (new Date() - last) / duration).toString();
        last = +new Date();
        if (+element.style.opacity < 1) {
          window.requestAnimationFrame && requestAnimationFrame(tick) || setTimeout(tick, 16);
        }
      };
      tick();
    }
    var body = document.body;
    function getThemeMode() {
      return parseInt(localStorage.getItem("wcTheme") || 2);
    }
    function canChangeTheme() {
      return Boolean(window.wc.darkLightEnabled);
    }
    function initThemeVariation() {
      if (!canChangeTheme()) {
        console.debug("User theming disabled.");
        return {
          isDarkTheme: window.wc.isSiteThemeDark,
          themeMode: window.wc.isSiteThemeDark ? 1 : 0
        };
      }
      console.debug("User theming enabled.");
      let isDarkTheme;
      let currentThemeMode = getThemeMode();
      console.debug(`User's theme variation: ${currentThemeMode}`);
      switch (currentThemeMode) {
        case 0:
          isDarkTheme = false;
          break;
        case 1:
          isDarkTheme = true;
          break;
        default:
          if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
            isDarkTheme = true;
          } else if (window.matchMedia("(prefers-color-scheme: light)").matches) {
            isDarkTheme = false;
          } else {
            isDarkTheme = window.wc.isSiteThemeDark;
          }
          break;
      }
      if (isDarkTheme && !body.classList.contains("dark")) {
        console.debug("Applying Wowchemy dark theme");
        document.body.classList.add("dark");
      } else if (!isDarkTheme && body.classList.contains("dark")) {
        console.debug("Applying Wowchemy light theme");
        document.body.classList.remove("dark");
      }
      return {
        isDarkTheme,
        themeMode: currentThemeMode
      };
    }
    function changeThemeModeClick(newMode) {
      if (!canChangeTheme()) {
        console.debug("Cannot change theme - user theming disabled.");
        return;
      }
      let isDarkTheme;
      switch (newMode) {
        case 0:
          localStorage.setItem("wcTheme", "0");
          isDarkTheme = false;
          console.debug("User changed theme variation to Light.");
          break;
        case 1:
          localStorage.setItem("wcTheme", "1");
          isDarkTheme = true;
          console.debug("User changed theme variation to Dark.");
          break;
        default:
          localStorage.setItem("wcTheme", "2");
          if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
            isDarkTheme = true;
          } else if (window.matchMedia("(prefers-color-scheme: light)").matches) {
            isDarkTheme = false;
          } else {
            isDarkTheme = window.wc.isSiteThemeDark;
          }
          console.debug("User changed theme variation to Auto.");
          break;
      }
      renderThemeVariation(isDarkTheme, newMode);
    }
    function showActiveTheme(mode) {
      let linkLight2 = document.querySelector(".js-set-theme-light");
      let linkDark2 = document.querySelector(".js-set-theme-dark");
      let linkAuto2 = document.querySelector(".js-set-theme-auto");
      if (linkLight2 === null) {
        return;
      }
      switch (mode) {
        case 0:
          linkLight2.classList.add("dropdown-item-active");
          linkDark2.classList.remove("dropdown-item-active");
          linkAuto2.classList.remove("dropdown-item-active");
          break;
        case 1:
          linkLight2.classList.remove("dropdown-item-active");
          linkDark2.classList.add("dropdown-item-active");
          linkAuto2.classList.remove("dropdown-item-active");
          break;
        default:
          linkLight2.classList.remove("dropdown-item-active");
          linkDark2.classList.remove("dropdown-item-active");
          linkAuto2.classList.add("dropdown-item-active");
          break;
      }
    }
    function renderThemeVariation(isDarkTheme, themeMode = 2, init = false) {
      const codeHlLight = document.querySelector("link[title=hl-light]");
      const codeHlDark = document.querySelector("link[title=hl-dark]");
      const codeHlEnabled = codeHlLight !== null || codeHlDark !== null;
      const diagramEnabled = document.querySelector("script[title=mermaid]") !== null;
      showActiveTheme(themeMode);
      const themeChangeEvent = new CustomEvent("wcThemeChange", {detail: {isDarkTheme: () => isDarkTheme}});
      document.dispatchEvent(themeChangeEvent);
      if (!init) {
        if (isDarkTheme === false && !body.classList.contains("dark") || isDarkTheme === true && body.classList.contains("dark")) {
          return;
        }
      }
      if (isDarkTheme === false) {
        if (!init) {
          Object.assign(document.body.style, {opacity: 0, visibility: "visible"});
          fadeIn(document.body, 600);
        }
        body.classList.remove("dark");
        if (codeHlEnabled) {
          console.debug("Setting HLJS theme to light");
          if (codeHlLight) {
            codeHlLight.disabled = false;
          }
          if (codeHlDark) {
            codeHlDark.disabled = true;
          }
        }
        if (diagramEnabled) {
          console.debug("Initializing Mermaid with light theme");
          if (init) {
            window.mermaid.initialize({startOnLoad: false, theme: "default", securityLevel: "loose"});
            fixMermaid(true);
          } else {
            location.reload();
          }
        }
      } else if (isDarkTheme === true) {
        if (!init) {
          Object.assign(document.body.style, {opacity: 0, visibility: "visible"});
          fadeIn(document.body, 600);
        }
        body.classList.add("dark");
        if (codeHlEnabled) {
          console.debug("Setting HLJS theme to dark");
          if (codeHlLight) {
            codeHlLight.disabled = true;
          }
          if (codeHlDark) {
            codeHlDark.disabled = false;
          }
        }
        if (diagramEnabled) {
          console.debug("Initializing Mermaid with dark theme");
          if (init) {
            window.mermaid.initialize({startOnLoad: false, theme: "dark", securityLevel: "loose"});
            fixMermaid(true);
          } else {
            location.reload();
          }
        }
      }
    }
    function onMediaQueryListEvent(event) {
      if (!canChangeTheme()) {
        return;
      }
      const darkModeOn = event.matches;
      console.debug(`OS dark mode preference changed to ${darkModeOn ? "\u{1F312} on" : "\u2600\uFE0F off"}.`);
      let currentThemeVariation = getThemeMode();
      let isDarkTheme;
      if (currentThemeVariation === 2) {
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
          isDarkTheme = true;
        } else if (window.matchMedia("(prefers-color-scheme: light)").matches) {
          isDarkTheme = false;
        } else {
          isDarkTheme = window.wc.isSiteThemeDark;
        }
        renderThemeVariation(isDarkTheme, currentThemeVariation);
      }
    }
    console.debug(`Environment: ${hugoEnvironment}`);
    function getNavBarHeight() {
      let navbar = document.getElementById("navbar-main");
      let navbarHeight = navbar ? navbar.getBoundingClientRect().height : 0;
      console.debug("Navbar height: " + navbarHeight);
      return navbarHeight;
    }
    function scrollToAnchor(target, duration = 0) {
      target = typeof target === "undefined" || typeof target === "object" ? decodeURIComponent(window.location.hash) : target;
      if ($(target).length) {
        target = "#" + $.escapeSelector(target.substring(1));
        let elementOffset = Math.ceil($(target).offset().top - getNavBarHeight());
        $("body").addClass("scrolling");
        $("html, body").animate({
          scrollTop: elementOffset
        }, duration, function() {
          $("body").removeClass("scrolling");
        });
      } else {
        console.debug("Cannot scroll to target `#" + target + "`. ID not found!");
      }
    }
    function fixScrollspy() {
      let $body = $("body");
      let data = $body.data("bs.scrollspy");
      if (data) {
        data._config.offset = getNavBarHeight();
        $body.data("bs.scrollspy", data);
        $body.scrollspy("refresh");
      }
    }
    function removeQueryParamsFromUrl() {
      if (window.history.replaceState) {
        let urlWithoutSearchParams = window.location.protocol + "//" + window.location.host + window.location.pathname + window.location.hash;
        window.history.replaceState({path: urlWithoutSearchParams}, "", urlWithoutSearchParams);
      }
    }
    window.addEventListener("hashchange", scrollToAnchor);
    $("#navbar-main li.nav-item a.nav-link, .js-scroll").on("click", function(event) {
      let hash = this.hash;
      if (this.pathname === window.location.pathname && hash && $(hash).length && $(".js-widget-page").length > 0) {
        event.preventDefault();
        let elementOffset = Math.ceil($(hash).offset().top - getNavBarHeight());
        $("html, body").animate({
          scrollTop: elementOffset
        }, 800);
      }
    });
    $(document).on("click", ".navbar-collapse.show", function(e) {
      let targetElement = $(e.target).is("a") ? $(e.target) : $(e.target).parent();
      if (targetElement.is("a") && targetElement.attr("class") != "dropdown-toggle") {
        $(this).collapse("hide");
      }
    });
    var pubFilters = {};
    var searchRegex;
    var filterValues;
    var $grid_pubs = $("#container-publications");
    if ($grid_pubs.length) {
      $grid_pubs.isotope({
        itemSelector: ".isotope-item",
        percentPosition: true,
        masonry: {
          columnWidth: ".grid-sizer"
        },
        filter: function() {
          let $this = $(this);
          let searchResults = searchRegex ? $this.text().match(searchRegex) : true;
          let filterResults = filterValues ? $this.is(filterValues) : true;
          return searchResults && filterResults;
        }
      });
      let $quickSearch = $(".filter-search").keyup(debounce(function() {
        searchRegex = new RegExp($quickSearch.val(), "gi");
        $grid_pubs.isotope();
      }));
      $(".pub-filters").on("change", function() {
        let $this = $(this);
        let filterGroup = $this[0].getAttribute("data-filter-group");
        pubFilters[filterGroup] = this.value;
        filterValues = concatValues(pubFilters);
        $grid_pubs.isotope();
        if (filterGroup === "pubtype") {
          let url = $(this).val();
          if (url.substr(0, 9) === ".pubtype-") {
            window.location.hash = url.substr(9);
          } else {
            window.location.hash = "";
          }
        }
      });
    }
    function debounce(fn, threshold) {
      let timeout;
      threshold = threshold || 100;
      return function debounced() {
        clearTimeout(timeout);
        let args = arguments;
        let _this = this;
        function delayed() {
          fn.apply(_this, args);
        }
        timeout = setTimeout(delayed, threshold);
      };
    }
    function concatValues(obj) {
      let value = "";
      for (let prop in obj) {
        value += obj[prop];
      }
      return value;
    }
    function filter_publications() {
      if (!$grid_pubs.length)
        return;
      let urlHash = window.location.hash.replace("#", "");
      let filterValue = "*";
      if (urlHash != "" && !isNaN(urlHash)) {
        filterValue = ".pubtype-" + urlHash;
      }
      let filterGroup = "pubtype";
      pubFilters[filterGroup] = filterValue;
      filterValues = concatValues(pubFilters);
      $grid_pubs.isotope();
      $(".pubtype-select").val(filterValue);
    }
    function initMap() {
      if ($("#map").length) {
        let map_provider = $("#map-provider").val();
        let lat = $("#map-lat").val();
        let lng = $("#map-lng").val();
        let zoom = parseInt($("#map-zoom").val());
        let address = $("#map-dir").val();
        let api_key = $("#map-api-key").val();
        if (map_provider === "google") {
          let map = new GMaps({
            div: "#map",
            lat,
            lng,
            zoom,
            zoomControl: true,
            zoomControlOpt: {
              style: "SMALL",
              position: "TOP_LEFT"
            },
            streetViewControl: false,
            mapTypeControl: false,
            gestureHandling: "cooperative"
          });
          map.addMarker({
            lat,
            lng,
            click: function() {
              let url = "https://www.google.com/maps/place/" + encodeURIComponent(address) + "/@" + lat + "," + lng + "/";
              window.open(url, "_blank");
            },
            title: address
          });
        } else {
          let map = new L.map("map").setView([lat, lng], zoom);
          if (map_provider === "mapbox" && api_key.length) {
            L.tileLayer("https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}", {
              attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery \xA9 <a href="http://mapbox.com">Mapbox</a>',
              tileSize: 512,
              maxZoom: 18,
              zoomOffset: -1,
              id: "mapbox/streets-v11",
              accessToken: api_key
            }).addTo(map);
          } else {
            L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
              maxZoom: 19,
              attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
            }).addTo(map);
          }
          let marker = L.marker([lat, lng]).addTo(map);
          let url = lat + "," + lng + "#map=" + zoom + "/" + lat + "/" + lng + "&layers=N";
          marker.bindPopup(address + '<p><a href="https://www.openstreetmap.org/directions?engine=osrm_car&route=' + url + '">Routing via OpenStreetMap</a></p>');
        }
      }
    }
    function printLatestRelease(selector, repo) {
      if (hugoEnvironment === "production") {
        $.getJSON("https://api.github.com/repos/" + repo + "/tags").done(function(json) {
          let release = json[0];
          $(selector).append(" " + release.name);
        }).fail(function(jqxhr, textStatus, error) {
          let err = textStatus + ", " + error;
          console.log("Request Failed: " + err);
        });
      }
    }
    function toggleSearchDialog() {
      if ($("body").hasClass("searching")) {
        $("[id=search-query]").blur();
        $("body").removeClass("searching compensate-for-scrollbar");
        removeQueryParamsFromUrl();
        $("#fancybox-style-noscroll").remove();
      } else {
        if (!$("#fancybox-style-noscroll").length && document.body.scrollHeight > window.innerHeight) {
          $("head").append('<style id="fancybox-style-noscroll">.compensate-for-scrollbar{margin-right:' + (window.innerWidth - document.documentElement.clientWidth) + "px;}</style>");
          $("body").addClass("compensate-for-scrollbar");
        }
        $("body").addClass("searching");
        $(".search-results").css({opacity: 0, visibility: "visible"}).animate({opacity: 1}, 200);
        $("#search-query").focus();
      }
    }
    function normalizeCarouselSlideHeights() {
      $(".carousel").each(function() {
        let items = $(".carousel-item", this);
        items.css("min-height", 0);
        let maxHeight = Math.max.apply(null, items.map(function() {
          return $(this).outerHeight();
        }).get());
        items.css("min-height", maxHeight + "px");
      });
    }
    function fixHugoOutput() {
      $("#TableOfContents").addClass("nav flex-column");
      $("#TableOfContents li").addClass("nav-item");
      $("#TableOfContents li a").addClass("nav-link");
      $("input[type='checkbox'][disabled]").parents("ul").addClass("task-list");
    }
    function getSiblings(elem) {
      return Array.prototype.filter.call(elem.parentNode.children, function(sibling) {
        return sibling !== elem;
      });
    }
    $(document).ready(function() {
      fixHugoOutput();
      let {isDarkTheme, themeMode} = initThemeVariation();
      renderThemeVariation(isDarkTheme, themeMode, true);
      if (codeHighlighting) {
        hljs.initHighlighting();
      }
      let child = document.querySelector(".docs-links .active");
      let parent = document.querySelector(".docs-links");
      if (child && parent) {
        scrollParentToChild(parent, child);
      }
    });
    $(window).on("load", function() {
      fixScrollspy();
      let isotopeInstances = document.querySelectorAll(".projects-container");
      let isotopeInstancesCount = isotopeInstances.length;
      if (window.location.hash && isotopeInstancesCount === 0) {
        scrollToAnchor(decodeURIComponent(window.location.hash), 0);
      }
      let child = document.querySelector(".docs-toc .nav-link.active");
      let parent = document.querySelector(".docs-toc");
      if (child && parent) {
        scrollParentToChild(parent, child);
      }
      let zoomOptions = {};
      if (document.body.classList.contains("dark")) {
        zoomOptions.background = "rgba(0,0,0,0.9)";
      } else {
        zoomOptions.background = "rgba(255,255,255,0.9)";
      }
      medium_zoom_esm_default("[data-zoomable]", zoomOptions);
      let isotopeCounter = 0;
      isotopeInstances.forEach(function(isotopeInstance, index) {
        console.debug(`Loading Isotope instance ${index}`);
        let iso;
        let isoSection = isotopeInstance.closest("section");
        let layout = "";
        if (isoSection.querySelector(".isotope").classList.contains("js-layout-row")) {
          layout = "fitRows";
        } else {
          layout = "masonry";
        }
        let defaultFilter = isoSection.querySelector(".default-project-filter");
        let filterText = "*";
        if (defaultFilter !== null) {
          filterText = defaultFilter.textContent;
        }
        console.debug(`Default Isotope filter: ${filterText}`);
        imagesLoaded(isotopeInstance, function() {
          iso = new Isotope(isotopeInstance, {
            itemSelector: ".isotope-item",
            layoutMode: layout,
            masonry: {
              gutter: 20
            },
            filter: filterText
          });
          let isoFilterButtons = isoSection.querySelectorAll(".project-filters a");
          isoFilterButtons.forEach((button) => button.addEventListener("click", (e) => {
            e.preventDefault();
            let selector = button.getAttribute("data-filter");
            console.debug(`Updating Isotope filter to ${selector}`);
            iso.arrange({filter: selector});
            button.classList.remove("active");
            button.classList.add("active");
            let buttonSiblings = getSiblings(button);
            buttonSiblings.forEach((buttonSibling) => {
              buttonSibling.classList.remove("active");
              buttonSibling.classList.remove("all");
            });
          }));
          incrementIsotopeCounter();
        });
      });
      function incrementIsotopeCounter() {
        isotopeCounter++;
        if (isotopeCounter === isotopeInstancesCount) {
          console.debug(`All Portfolio Isotope instances loaded.`);
          if (window.location.hash) {
            scrollToAnchor(decodeURIComponent(window.location.hash), 0);
          }
        }
      }
      if ($(".pub-filters-select")) {
        filter_publications();
      }
      $(".js-cite-modal").click(function(e) {
        e.preventDefault();
        let filename = $(this).attr("data-filename");
        let modal = $("#modal");
        modal.find(".modal-body code").load(filename, function(response, status, xhr) {
          if (status == "error") {
            let msg = "Error: ";
            $("#modal-error").html(msg + xhr.status + " " + xhr.statusText);
          } else {
            $(".js-download-cite").attr("href", filename);
          }
        });
        modal.modal("show");
      });
      $(".js-copy-cite").click(function(e) {
        e.preventDefault();
        let range = document.createRange();
        let code_node = document.querySelector("#modal .modal-body");
        range.selectNode(code_node);
        window.getSelection().addRange(range);
        try {
          document.execCommand("copy");
        } catch (e2) {
          console.log("Error: citation copy failed.");
        }
        window.getSelection().removeRange(range);
      });
      initMap();
      let githubReleaseSelector = ".js-github-release";
      if ($(githubReleaseSelector).length > 0) {
        printLatestRelease(githubReleaseSelector, $(githubReleaseSelector).data("repo"));
      }
      document.addEventListener("keyup", (event) => {
        if (event.code === "Escape") {
          const body2 = document.body;
          if (body2.classList.contains("searching")) {
            toggleSearchDialog();
          }
        }
        if (event.key === "/") {
          let focusedElement = document.hasFocus() && document.activeElement !== document.body && document.activeElement !== document.documentElement && document.activeElement || null;
          let isInputFocused = focusedElement instanceof HTMLInputElement || focusedElement instanceof HTMLTextAreaElement;
          if (searchEnabled && !isInputFocused) {
            event.preventDefault();
            toggleSearchDialog();
          }
        }
      });
      if (searchEnabled) {
        $(".js-search").click(function(e) {
          e.preventDefault();
          toggleSearchDialog();
        });
      }
      $('[data-toggle="tooltip"]').tooltip();
    });
    var linkLight = document.querySelector(".js-set-theme-light");
    var linkDark = document.querySelector(".js-set-theme-dark");
    var linkAuto = document.querySelector(".js-set-theme-auto");
    if (linkLight && linkDark && linkAuto) {
      linkLight.addEventListener("click", (event) => {
        event.preventDefault();
        changeThemeModeClick(0);
      });
      linkDark.addEventListener("click", (event) => {
        event.preventDefault();
        changeThemeModeClick(1);
      });
      linkAuto.addEventListener("click", (event) => {
        event.preventDefault();
        changeThemeModeClick(2);
      });
    }
    var darkModeMediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
    darkModeMediaQuery.addEventListener("change", (event) => {
      onMediaQueryListEvent(event);
    });
    window.addEventListener("load", normalizeCarouselSlideHeights);
    window.addEventListener("resize", normalizeCarouselSlideHeights);
    window.addEventListener("orientationchange", normalizeCarouselSlideHeights);
    $("body").on("mouseenter mouseleave", ".dropdown", function(e) {
      var dropdown = $(e.target).closest(".dropdown");
      var menu = $(".dropdown-menu", dropdown);
      dropdown.addClass("show");
      menu.addClass("show");
      setTimeout(function() {
        dropdown[dropdown.is(":hover") ? "addClass" : "removeClass"]("show");
        menu[dropdown.is(":hover") ? "addClass" : "removeClass"]("show");
      }, 300);
    });
    var resizeTimer;
    $(window).resize(function() {
      clearTimeout(resizeTimer);
      resizeTimer = setTimeout(fixScrollspy, 200);
    });
  })();
  (() => {
    var content_type = {authors: "Authors", event: "Events", post: "Posts", project: "Projects", publication: "Publications", slides: "Slides"};
    var i18n = {no_results: "No results found", placeholder: "Search...", results: "results found"};
    var search_config = {indexURI: "/index.json", minLength: 1, threshold: 0.3};
    var fuseOptions = {
      shouldSort: true,
      includeMatches: true,
      tokenize: true,
      threshold: search_config.threshold,
      location: 0,
      distance: 100,
      maxPatternLength: 32,
      minMatchCharLength: search_config.minLength,
      keys: [
        {name: "title", weight: 0.99},
        {name: "summary", weight: 0.6},
        {name: "authors", weight: 0.5},
        {name: "content", weight: 0.2},
        {name: "tags", weight: 0.5},
        {name: "categories", weight: 0.5}
      ]
    };
    var summaryLength = 60;
    function getSearchQuery(name) {
      return decodeURIComponent((location.search.split(name + "=")[1] || "").split("&")[0]).replace(/\+/g, " ");
    }
    function updateURL(url) {
      if (history.replaceState) {
        window.history.replaceState({path: url}, "", url);
      }
    }
    function initSearch(force, fuse) {
      let query = $("#search-query").val();
      if (query.length < 1) {
        $("#search-hits").empty();
        $("#search-common-queries").show();
      }
      if (!force && query.length < fuseOptions.minMatchCharLength)
        return;
      $("#search-hits").empty();
      $("#search-common-queries").hide();
      searchAcademic(query, fuse);
      let newURL = window.location.protocol + "//" + window.location.host + window.location.pathname + "?q=" + encodeURIComponent(query) + window.location.hash;
      updateURL(newURL);
    }
    function searchAcademic(query, fuse) {
      let results = fuse.search(query);
      if (results.length > 0) {
        $("#search-hits").append('<h3 class="mt-0">' + results.length + " " + i18n.results + "</h3>");
        parseResults(query, results);
      } else {
        $("#search-hits").append('<div class="search-no-results">' + i18n.no_results + "</div>");
      }
    }
    function parseResults(query, results) {
      $.each(results, function(key, value) {
        let content_key = value.item.section;
        let content = "";
        let snippet = "";
        let snippetHighlights = [];
        if (["publication", "event"].includes(content_key)) {
          content = value.item.summary;
        } else {
          content = value.item.content;
        }
        if (fuseOptions.tokenize) {
          snippetHighlights.push(query);
        } else {
          $.each(value.matches, function(matchKey, matchValue) {
            if (matchValue.key == "content") {
              let start = matchValue.indices[0][0] - summaryLength > 0 ? matchValue.indices[0][0] - summaryLength : 0;
              let end = matchValue.indices[0][1] + summaryLength < content.length ? matchValue.indices[0][1] + summaryLength : content.length;
              snippet += content.substring(start, end);
              snippetHighlights.push(matchValue.value.substring(matchValue.indices[0][0], matchValue.indices[0][1] - matchValue.indices[0][0] + 1));
            }
          });
        }
        if (snippet.length < 1) {
          snippet += value.item.summary;
        }
        let template = $("#search-hit-fuse-template").html();
        if (content_key in content_type) {
          content_key = content_type[content_key];
        }
        let templateData = {
          key,
          title: value.item.title,
          type: content_key,
          relpermalink: value.item.relpermalink,
          snippet
        };
        let output = render(template, templateData);
        $("#search-hits").append(output);
        $.each(snippetHighlights, function(hlKey, hlValue) {
          $("#summary-" + key).mark(hlValue);
        });
      });
    }
    function render(template, data) {
      let key, find, re;
      for (key in data) {
        find = "\\{\\{\\s*" + key + "\\s*\\}\\}";
        re = new RegExp(find, "g");
        template = template.replace(re, data[key]);
      }
      return template;
    }
    if (typeof Fuse === "function") {
      $.getJSON(search_config.indexURI, function(search_index) {
        let fuse = new Fuse(search_index, fuseOptions);
        let query = getSearchQuery("q");
        if (query) {
          $("body").addClass("searching");
          $(".search-results").css({opacity: 0, visibility: "visible"}).animate({opacity: 1}, 200);
          $("#search-query").val(query);
          $("#search-query").focus();
          initSearch(true, fuse);
        }
        $("#search-query").keyup(function(e) {
          clearTimeout($.data(this, "searchTimer"));
          if (e.keyCode == 13) {
            initSearch(true, fuse);
          } else {
            $(this).data("searchTimer", setTimeout(function() {
              initSearch(false, fuse);
            }, 250));
          }
        });
      });
    }
  })();
  function BubblePiece(opts) {
    Piece.call(this, opts);
    var defaults = {
      x: 0,
      y: 0,
      scale: 1,
      img: null,
      img_width: 0,
      img_height: 0,
      jitter_factor: 1,
      jitter_radius: 10,
      jitter_speed: 1e3
    };
    var _opts = $.extend({}, defaults, opts);
    this.point = new Point(_opts.x, _opts.y);
    this.presentationPoint = new Point(_opts.x, _opts.y);
    this.scale = _opts.scale;
    this.img = _opts.img;
    this.img_width = _opts.img_width;
    this.img_height = _opts.img_height;
    this.jitter_factor = _opts.jitter_factor;
    this.jitter_radius = _opts.jitter_radius;
    this.jitter_speed = _opts.jitter_speed;
  }
  BubblePiece.prototype = new Piece();
  BubblePiece.prototype.constructor = BubblePiece;
  BubblePiece.prototype.draw = function(canvas2) {
    var self = this;
    self.update();
    var point = self.jitter(self.presentationPoint);
    var ctx = canvas2.getContext("2d");
    var scaled_width = self.scale * self.img_width;
    var scaled_height = self.scale * self.img_height;
    ctx.drawImage(self.img[0], point.x - scaled_width / 2, point.y - scaled_height / 2, scaled_width, scaled_height);
  };
  BubblePiece.prototype.jitter = function(source) {
    var self = this;
    var point = new Point(source.x, source.y);
    var speed = self.jitter_speed;
    var now = new Date().getTime();
    var rem = now % speed;
    var phase = rem / speed;
    var angle = phase * (2 * Math.PI);
    var radius = self.jitter_radius * self.jitter_factor;
    point.x = point.x + radius * Math.cos(angle);
    point.y = point.y + radius * Math.sin(angle);
    return point;
  };
  function CirclePiece(opts) {
    Piece.call(this, opts);
    var defaults = {
      x: 0,
      y: 0,
      radius: 5,
      fillStyle: "rgba(0,0,0,1)",
      jitter_factor: 1,
      jitter_radius: 10,
      jitter_speed: 1e3
    };
    var _opts = $.extend({}, defaults, opts);
    this.point = new Point(_opts.x, _opts.y);
    this.presentationPoint = new Point(_opts.x, _opts.y);
    this.radius = _opts.radius;
    this.fillStyle = _opts.fillStyle;
    this.jitter_factor = _opts.jitter_factor;
    this.jitter_radius = _opts.jitter_radius;
    this.jitter_speed = _opts.jitter_speed;
  }
  CirclePiece.prototype = new Piece();
  CirclePiece.prototype.constructor = CirclePiece;
  CirclePiece.prototype.draw = function(canvas2) {
    var self = this;
    self.update();
    var point = self.jitter(self.presentationPoint);
    var ctx = canvas2.getContext("2d");
    ctx.beginPath();
    ctx.arc(point.x, point.y, self.radius, 0, 2 * Math.PI, false);
    ctx.fillStyle = self.fillStyle;
    ctx.fill();
  };
  CirclePiece.prototype.jitter = function(source) {
    var self = this;
    var point = new Point(source.x, source.y);
    var speed = self.jitter_speed;
    var now = new Date().getTime();
    var rem = now % speed;
    var phase = rem / speed;
    var angle = phase * (2 * Math.PI);
    var radius = self.jitter_radius * self.jitter_factor;
    point.x = point.x + radius * Math.cos(angle);
    point.y = point.y + radius * Math.sin(angle);
    return point;
  };
  var Helpers = {
    Random: {
      getRandomInt: function(min, max) {
        return Math.floor(Math.random() * (max - min)) + min;
      },
      getRandomIntInclusive: function(min, max) {
        return Helpers.Random.getRandomInt(min, max + 1);
      },
      getRandomIndex: function(source_array) {
        var min = 0;
        var max = source_array.length;
        var index = Helpers.Random.getRandomInt(0, max);
        return index;
      }
    },
    Easing: {
      linear: function(t, b, c, d) {
        return c * t / d + b;
      },
      easeInOutQuad: function(t, b, c, d) {
        t /= d / 2;
        if (t < 1)
          return c / 2 * t * t + b;
        t--;
        return -c / 2 * (t * (t - 2) - 1) + b;
      },
      easeOutQuad: function(t, b, c, d) {
        t /= d;
        return -c * t * (t - 2) + b;
      },
      easeInQuad: function(t, b, c, d) {
        t /= d;
        return c * t * t + b;
      }
    }
  };
  function Point(x, y) {
    this.x = x;
    this.y = y;
  }
  var canvas;
  var canvas_dom;
  var shapes;
  var piece_collection;
  var renderer;
  var current_shape = "blankcanvas";
  var imgNames = ["emerge", "systemThinking", "process", "dynamics", "teams", "learning", "decisions"];
  $(function() {
    if ($("section").is("#swarm-banner")) {
      let imgLoop2 = function() {
        var shape_name = imgNames[imgCntr];
        var shape = shapes.get(shape_name);
        if (shape) {
          current_shape = shape_name;
          makeShape(shape);
        }
        imgCntr++;
        if (imgCntr >= imgNames.length) {
          imgCntr = 0;
        }
      };
      var imgLoop = imgLoop2;
      canvas_dom = $("#canvas");
      canvas = canvas_dom[0];
      var window_width = $("#swarm-banner .container").width();
      var window_height = $("#swarm-banner").height();
      canvas.width = window_width * 2;
      canvas.height = window_height * 2;
      canvas_dom.css({
        width: window_width,
        height: window_height
      });
      initShapes();
      initParticles();
      $(window).resize(function() {
        clearTimeout(this.timer);
        this.timer = setTimeout(function() {
          renderer.stop();
          var window_width2 = $("#swarm-banner .container").width();
          var window_height2 = $("#swarm-banner").height();
          canvas.width = window_width2 * 2;
          canvas.height = window_height2 * 2;
          canvas_dom.css({
            width: window_width2,
            height: window_height2
          });
          recenterShapes();
          makeShape(shapes.get(current_shape));
          renderer.start();
        }, 250);
      });
      var imgCntr = 0;
      setInterval(imgLoop2, 5e3);
    }
  });
  function initShapes() {
    shapes = new ShapesCollection();
    shapes.add("blankcanvas", new Shape({
      width: canvas.width + 400,
      height: canvas.height + 400,
      offset: {
        x: -200,
        y: -200
      },
      spread: 5
    }));
    var process_img = $("img#process");
    shapes.add("process", new Shape({
      src: process_img.attr("src"),
      width: process_img.attr("width") * 1,
      height: process_img.attr("height") * 1,
      offset: {
        x: (canvas.width - process_img.attr("width") * 1) * 0.5,
        y: (canvas.height - process_img.attr("height") * 1) * 0.5
      },
      spread: 9,
      loaded: function(shape) {
        if (shapes.loaded()) {
          renderer.start();
        }
      }
    }));
    var emerge_img = $("img#emerge");
    shapes.add("emerge", new Shape({
      src: emerge_img.attr("src"),
      width: emerge_img.attr("width") * 1,
      height: emerge_img.attr("height") * 1,
      offset: {
        x: (canvas.width - emerge_img.attr("width") * 1) * 0.5,
        y: (canvas.height - emerge_img.attr("height") * 1) * 0.5
      },
      spread: 8,
      loaded: function(shape) {
        if (shapes.loaded()) {
          renderer.start();
        }
      }
    }));
    var systemThinking_img = $("img#systemThinking");
    shapes.add("systemThinking", new Shape({
      src: systemThinking_img.attr("src"),
      width: systemThinking_img.attr("width") * 1,
      height: systemThinking_img.attr("height") * 1,
      offset: {
        x: (canvas.width - systemThinking_img.attr("width") * 1) * 0.5,
        y: (canvas.height - systemThinking_img.attr("height") * 1) * 0.5
      },
      spread: 10,
      loaded: function(shape) {
        if (shapes.loaded()) {
          renderer.start();
        }
      }
    }));
    var dynamics_img = $("img#dynamics");
    shapes.add("dynamics", new Shape({
      src: dynamics_img.attr("src"),
      width: dynamics_img.attr("width") * 1,
      height: dynamics_img.attr("height") * 1,
      offset: {
        x: (canvas.width - dynamics_img.attr("width") * 1) * 0.5,
        y: (canvas.height - dynamics_img.attr("height") * 1) * 0.5
      },
      spread: 10,
      loaded: function(shape) {
        if (shapes.loaded()) {
          renderer.start();
        }
      }
    }));
    var teams_img = $("img#teams");
    shapes.add("teams", new Shape({
      src: teams_img.attr("src"),
      width: teams_img.attr("width") * 1,
      height: teams_img.attr("height") * 1,
      offset: {
        x: (canvas.width - teams_img.attr("width") * 1) * 0.5,
        y: (canvas.height - teams_img.attr("height") * 1) * 0.5
      },
      spread: 10,
      loaded: function(shape) {
        if (shapes.loaded()) {
          renderer.start();
        }
      }
    }));
    var decisions_img = $("img#decisions");
    shapes.add("decisions", new Shape({
      src: decisions_img.attr("src"),
      width: decisions_img.attr("width") * 1,
      height: decisions_img.attr("height") * 1,
      offset: {
        x: (canvas.width - decisions_img.attr("width") * 1) * 0.5,
        y: (canvas.height - decisions_img.attr("height") * 1) * 0.5
      },
      spread: 10,
      loaded: function(shape) {
        if (shapes.loaded()) {
          renderer.start();
        }
      }
    }));
    var learning_img = $("img#learning");
    shapes.add("learning", new Shape({
      src: learning_img.attr("src"),
      width: learning_img.attr("width") * 1,
      height: learning_img.attr("height") * 1,
      offset: {
        x: (canvas.width - learning_img.attr("width") * 1) * 0.5,
        y: (canvas.height - learning_img.attr("height") * 1) * 0.5
      },
      spread: 10,
      loaded: function(shape) {
        if (shapes.loaded()) {
          renderer.start();
        }
      }
    }));
  }
  function recenterShapes() {
    for (var shape_key in shapes.shapes) {
      var img = $("img#" + shape_key);
      if (img.length == 0) {
        continue;
      }
      var shape = shapes.get(shape_key);
      shape.opts.offset.x = (canvas.width - img.attr("width")) / 2;
      shape.opts.offset.y = (canvas.height - img.attr("height")) / 2;
      shape.process();
    }
    var blankcanvas = shapes.get("blankcanvas");
    blankcanvas.opts.width = canvas.width + 400;
    blankcanvas.opts.height = canvas.height + 400;
    blankcanvas.process();
  }
  function initParticles() {
    piece_collection = new PiecesCollection();
    var particle_img = $("img#particle");
    var spots = shapes.get("blankcanvas").getVisiblePixels();
    for (var i = 0; i < 1e3; i++) {
      var random_index = Helpers.Random.getRandomIndex(spots);
      var point = spots.splice(random_index, 1)[0];
      piece_collection.add(new CirclePiece({
        x: point.x,
        y: point.y,
        radius: 5,
        fillStyle: "rgba(24,188,156,1)",
        jitter_radius: Helpers.Random.getRandomIntInclusive(10, 15),
        jitter_speed: Helpers.Random.getRandomIntInclusive(1e3, 1200)
      }));
    }
    renderer = new Renderer({
      canvas,
      draw: function(r) {
        for (var i2 = 0; i2 < piece_collection.pieces.length; i2++) {
          var piece = piece_collection.pieces[i2];
          piece.draw(r.canvas);
        }
      }
    });
    renderer.start();
  }
  function makeShape(shape) {
    var blankcanvas = shapes.get("blankcanvas");
    toShape(blankcanvas, {
      easing: "easeOutQuad",
      speed: 1e3
    });
    toShape(shape, {
      easing: "easeInOutQuad",
      speed: 1e3,
      additive: true
    });
  }
  function toShape(shape, opts) {
    var defaults = {
      easing: "easeOutQuad",
      speed: 2e3,
      additive: false,
      random: false,
      range: 0,
      repeat: false
    };
    var _opts = $.extend({}, defaults, opts);
    var spots = shape.getVisiblePixels();
    for (var i = 0; i < piece_collection.pieces.length; i++) {
      var piece = piece_collection.pieces[i];
      if (current_shape == "blankcanvas") {
        piece.jitter_radius = Helpers.Random.getRandomIntInclusive(10, 15);
        piece.jitter_speed = Helpers.Random.getRandomIntInclusive(1e3, 1200);
      } else {
        piece.jitter_radius = Helpers.Random.getRandomIntInclusive(1, 2);
        piece.jitter_speed = Helpers.Random.getRandomIntInclusive(800, 1e3);
      }
      if (spots.length > 0) {
        var random_index = Helpers.Random.getRandomIndex(spots);
        var point = spots.splice(random_index, 1)[0];
      } else {
        var x = Helpers.Random.getRandomIntInclusive(0, canvas.width - 1);
        var y = Helpers.Random.getRandomIntInclusive(0, canvas.height - 1);
        var point = new Point(x, y);
      }
      var speed = _opts.speed;
      if (_opts.random && _opts.range > 0) {
        speed = _opts.speed - Math.round(_opts.range / 2) + Helpers.Random.getRandomIntInclusive(0, _opts.range);
      }
      var tween = new Tween({
        from: piece.presentationPoint,
        to: new Point(point.x, point.y),
        easing: _opts.easing,
        duration: speed,
        repeat: _opts.repeat
      });
      if (!_opts.additive) {
        piece.clearTweens();
      }
      piece.addTween(tween);
    }
  }
  function PiecesCollection() {
    this.pieces = [];
    this.add = function(piece) {
      this.pieces.push(piece);
    };
  }
  PiecesCollection.prototype.setJitterFactor = function(jitter_factor) {
    for (var i = 0; i < this.pieces.length; i++) {
      var piece = this.pieces[i];
      piece.jitter_factor = jitter_factor;
    }
  };
  function Piece(opts) {
    var defaults = {
      x: 0,
      y: 0
    };
    var _opts = $.extend({}, defaults, opts);
    this.point = new Point(_opts.x, _opts.y);
    this.presentationPoint = new Point(_opts.x, _opts.y);
    this.tweens = [];
  }
  Piece.prototype.draw = function(canvas2) {
  };
  Piece.prototype.update = function() {
    var self = this;
    self.doTween();
  };
  Piece.prototype.doTween = function() {
    var self = this;
    var tween = null;
    for (var i = 0; i < self.tweens.length; i++) {
      var the_tween = self.tweens[i];
      if (the_tween.started) {
        tween = the_tween;
        break;
      }
    }
    if (!tween) {
      return;
    }
    var now = new Date().getTime();
    var delta = now - tween.started;
    if (delta >= tween.duration) {
      self.point.x = tween.to.x;
      self.point.y = tween.to.y;
      self.presentationPoint.x = tween.to.x;
      self.presentationPoint.y = tween.to.y;
      if (!tween.repeat) {
        self.tweens.splice(0, 1);
        if (self.tweens.length > 0) {
          var next_tween = self.tweens[0];
          next_tween.from = next_tween.original_from = new Point(this.presentationPoint.x, this.presentationPoint.y);
          next_tween.start();
        }
      } else {
        tween.reversing = !tween.reversing;
        if (tween.reversing) {
          tween.to = tween.original_from;
        } else {
          tween.to = tween.original_to;
        }
        tween.from = new Point(this.presentationPoint.x, this.presentationPoint.y);
        tween.start();
      }
    } else {
      var range_x = tween.to.x - tween.from.x;
      var range_y = tween.to.y - tween.from.y;
      var current_x = tween.easing(delta, tween.from.x, range_x, tween.duration);
      var current_y = tween.easing(delta, tween.from.y, range_y, tween.duration);
      self.presentationPoint.x = current_x;
      self.presentationPoint.y = current_y;
    }
  };
  Piece.prototype.jitter = function(point) {
    return point;
  };
  Piece.prototype.clearTweens = function() {
    var self = this;
    self.tweens = [];
    this.point = new Point(this.presentationPoint.x, this.presentationPoint.y);
    return self;
  };
  Piece.prototype.addTween = function(tween) {
    var self = this;
    self.tweens.push(tween);
    if (self.tweens.length == 1) {
      tween.from = tween.original_from = new Point(this.presentationPoint.x, this.presentationPoint.y);
      this.point = new Point(this.presentationPoint.x, this.presentationPoint.y);
      self.tweens[0].start();
    }
    return self;
  };
  function Renderer(opts) {
    var defaults = {
      canvas: null,
      draw: function() {
      }
    };
    var _opts = $.extend({}, defaults, opts);
    this.stopped = false;
    this.request_id = null;
    this.canvas = _opts.canvas;
    this.ctx = this.canvas.getContext("2d");
    this.draw_function = _opts.draw;
  }
  Renderer.prototype.stop = function() {
    var self = this;
    self.stopped = true;
    window.cancelAnimationFrame(self.request_id);
    self.request_id = null;
  };
  Renderer.prototype.start = function() {
    var self = this;
    self.stopped = false;
    self.loop();
  };
  Renderer.prototype.loop = function() {
    var self = this;
    if (self.stopped) {
      return;
    }
    self.clear();
    self.draw();
    self.queue();
  };
  Renderer.prototype.clear = function() {
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    return this;
  };
  Renderer.prototype.draw = function() {
    var self = this;
    self.draw_function(self);
    return self;
  };
  Renderer.prototype.queue = function() {
    var self = this;
    self.request_id = window.requestAnimationFrame(function() {
      self.loop.apply(self);
    });
  };
  function ShapesCollection() {
    this.shapes = {};
    this.add = function(key, shape) {
      this.shapes[key] = shape;
    };
    this.loaded = function() {
      var loaded = true;
      for (var key in this.shapes) {
        var shape = this.shapes[key];
        if (shape == null || shape.loaded == false) {
          loaded = false;
          break;
        }
      }
      return loaded;
    };
    this.get = function(key) {
      return this.shapes[key];
    };
  }
  function Shape(opts) {
    var self = this;
    this.loaded = false;
    var defaults = {
      src: "",
      width: 0,
      height: 0,
      offset: {
        x: 0,
        y: 0
      },
      spread: 1,
      loaded: function() {
      }
    };
    var _opts = $.extend({}, defaults, opts);
    this.opts = _opts;
    this.imageData = null;
    if (this.opts.src != "") {
      this.img = $("<img/>");
      this.img.bind("load", function() {
        self.loaded = true;
        self.process();
        self.opts.loaded(self);
      });
      this.img.attr("src", _opts.src);
    } else {
      self.process();
      self.loaded = true;
      self.opts.loaded(self);
    }
  }
  Shape.prototype.process = function() {
    var self = this;
    this.visiblePixels = [];
    var width = Math.round(self.opts.width / self.opts.spread);
    var height = Math.round(self.opts.height / self.opts.spread);
    if (this.img) {
      var canvas_dom2 = $('<canvas width="' + width + '" height="' + height + '">');
      var canvas2 = canvas_dom2[0];
      var ctx = canvas2.getContext("2d");
      ctx.drawImage(self.img[0], 0, 0, width, height);
      self.imageData = ctx.getImageData(0, 0, canvas2.width, canvas2.height);
      for (var y = 0; y < height; y++) {
        for (var x = 0; x < width; x++) {
          var alpha_index = y * width * 4 + x * 4 + 3;
          var alpha = self.imageData.data[alpha_index];
          if (alpha > 0) {
            self.visiblePixels.push(new Point(x * self.opts.spread + self.opts.offset.x, y * self.opts.spread + self.opts.offset.y));
          }
        }
      }
    } else {
      for (var x = 0; x < width; x++) {
        for (var y = 0; y < height; y++) {
          self.visiblePixels.push(new Point(x * self.opts.spread + this.opts.offset.x, y * self.opts.spread + this.opts.offset.y));
        }
      }
    }
  };
  Shape.prototype.getVisiblePixels = function() {
    return this.visiblePixels.slice(0);
  };
  function Tween(opts) {
    var defaults = {
      to: {
        x: 0,
        y: 0
      },
      easing: "linear",
      duration: 1e3,
      repeat: false
    };
    var _opts = $.extend({}, defaults, opts);
    this.started = null;
    this.duration = _opts.duration;
    this.repeat = _opts.repeat;
    this.reversing = false;
    this.original_from = {
      x: null,
      y: null
    };
    this.original_to = {
      x: _opts.to.x,
      y: _opts.to.y
    };
    this.to = _opts.to;
    this.start = function() {
      this.started = new Date().getTime();
    };
    if (_opts.easing in Helpers.Easing) {
      this.easing = Helpers.Easing[_opts.easing];
    } else {
      this.easing = Helpers.Easing.linear;
    }
  }
  Tween.prototype.setFrom = function(from) {
    this.from = from;
    this.original_from = from;
  };
  $("#zoom-modal").on("show.bs.modal", function(event) {
    var image = $(event.relatedTarget);
    var fullImage = image.data("full-image");
    var imageCaption = image.data("modal-caption");
    var modal = $(this);
    modal.find(".modal-body img").attr("src", fullImage);
    modal.find(".modal-body figcaption").text(imageCaption);
  });
})();
/*! medium-zoom 1.0.6 | MIT License | https://github.com/francoischalifour/medium-zoom */
//# sourceMappingURL=data:application/json;base64,
